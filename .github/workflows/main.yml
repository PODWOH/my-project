name: Python CI/CD Pipeline

on:
  push:
    branches: [ main, development, release/* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests with unittest
      run: |
        python -m unittest discover tests -v
        
    - name: Run tests with pytest
      run: |
        pip install pytest pytest-cov
        pytest tests/ --cov=src --cov-report=xml
        
    - name: Code quality check with flake8
      run: |
        pip install flake8
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools
        pip install -r requirements.txt
        
    - name: Create proper setup.py
      run: |
        cat > setup.py << 'EOF'
        from setuptools import setup, find_packages
        
        with open("README.md", "r", encoding="utf-8") as fh:
            long_description = fh.read()
        
        setup(
            name="my-calculator",
            version="0.1.0",
            author="Your Name",
            author_email="your.email@example.com",
            description="A simple calculator package",
            long_description=long_description,
            long_description_content_type="text/markdown",
            packages=find_packages(where="src"),
            package_dir={"": "src"},
            classifiers=[
                "Programming Language :: Python :: 3",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
            ],
            python_requires=">=3.8",
        )
        EOF
        
    - name: Build package
      run: |
        python setup.py sdist bdist_wheel
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 src/ tests/ --count --max-complexity=10 --max-line-length=127 --statistics

  documentation:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate documentation
      run: |
        mkdir -p docs_build
        cp README.md docs_build/
        cp -r docs/* docs_build/ 2>/dev/null || true
        echo "Documentation generated at $(date)" > docs_build/build_info.txt
        
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs_build/

        
  auto-merge:
    name: "Auto-merge: Enable for PR"
    runs-on: ubuntu-latest
    # –ó–∞–≤–∏—Å–∏–º —Ç–æ–ª—å–∫–æ –æ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    needs: [test, build, lint]
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è - –∑–∞–ø—É—Å–∫–∞–µ–º –¥–ª—è –ª—é–±–æ–≥–æ PR –≤ main
    if: |
      github.event_name == 'pull_request' && 
      github.base_ref == 'refs/heads/main'
    
    permissions:
      pull-requests: write
      contents: write
      checks: read
      
    steps:
      - name: Wait for status checks
        run: |
          echo "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å-–ø—Ä–æ–≤–µ—Ä–æ–∫..."
          sleep 30
          
      - name: Get PR details
        id: pr-info
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            return {
              mergeable: pr.mergeable,
              state: pr.state,
              title: pr.title,
              head_ref: pr.head.ref,
              base_ref: pr.base.ref
            };
          result-encoding: json
          
      - name: Debug PR info
        run: |
          echo "PR State: ${{ fromJson(steps.pr-info.outputs.result).state }}"
          echo "Mergeable: ${{ fromJson(steps.pr-info.outputs.result).mergeable }}"
          echo "Head Ref: ${{ fromJson(steps.pr-info.outputs.result).head_ref }}"
          echo "Base Ref: ${{ fromJson(steps.pr-info.outputs.result).base_ref }}"
          
      - name: Enable Auto-merge (–µ—Å–ª–∏ PR –º–æ–∂–Ω–æ –º–µ—Ä–∂–∏—Ç—å)
        if: |
          fromJson(steps.pr-info.outputs.result).state == 'open' &&
          fromJson(steps.pr-info.outputs.result).mergeable == true
        uses: actions/github-script@v6
        with:
          script: |
            try {
              await github.rest.pulls.enableAutomerge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                merge_method: 'squash'
              });
              
              console.log('‚úÖ Auto-merge —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
              
              // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ PR
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: 'üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! Auto-merge –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. PR –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ª–∏—Ç –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≤–µ—Ç–∫—É.'
              });
              
            } catch (error) {
              console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ auto-merge:', error.message);
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚ö†Ô∏è Auto-merge –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å: ${error.message}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã –≤–µ—Ç–∫–∏.`
              });
            }
            
      - name: Skip auto-merge (–µ—Å–ª–∏ PR –Ω–µ–ª—å–∑—è –º–µ—Ä–∂–∏—Ç—å)
        if: |
          fromJson(steps.pr-info.outputs.result).state != 'open' ||
          fromJson(steps.pr-info.outputs.result).mergeable != true
        run: |
          echo "‚ùå PR –Ω–µ–ª—å–∑—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–º–µ—Ä–∂–∏—Ç—å"
          echo "State: ${{ fromJson(steps.pr-info.outputs.result).state }}"
          echo "Mergeable: ${{ fromJson(steps.pr-info.outputs.result).mergeable }}"
          echo "Auto-merge –ø—Ä–æ–ø—É—â–µ–Ω"
