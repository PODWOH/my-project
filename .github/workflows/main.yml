name: Python CI/CD Pipeline

on:
  push:
    branches: [ main, development, release/* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests with unittest
      run: |
        python -m unittest discover tests -v
        
    - name: Run tests with pytest
      run: |
        pip install pytest pytest-cov
        pytest tests/ --cov=src --cov-report=xml
        
    - name: Code quality check with flake8
      run: |
        pip install flake8
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools
        pip install -r requirements.txt
        
    - name: Create proper setup.py
      run: |
        cat > setup.py << 'EOF'
        from setuptools import setup, find_packages
        
        with open("README.md", "r", encoding="utf-8") as fh:
            long_description = fh.read()
        
        setup(
            name="my-calculator",
            version="0.1.0",
            author="Your Name",
            author_email="your.email@example.com",
            description="A simple calculator package",
            long_description=long_description,
            long_description_content_type="text/markdown",
            packages=find_packages(where="src"),
            package_dir={"": "src"},
            classifiers=[
                "Programming Language :: Python :: 3",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
            ],
            python_requires=">=3.8",
        )
        EOF
        
    - name: Build package
      run: |
        python setup.py sdist bdist_wheel
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 src/ tests/ --count --max-complexity=10 --max-line-length=127 --statistics

  documentation:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate documentation
      run: |
        mkdir -p docs_build
        cp README.md docs_build/
        cp -r docs/* docs_build/ 2>/dev/null || true
        echo "Documentation generated at $(date)" > docs_build/build_info.txt
        
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs_build/

        
  auto-merge:
    name: Enable Auto-merge for PR
    runs-on: ubuntu-latest
    needs: [test, build, lint]  # Все ключевые проверки должны пройти
    
    # Условия запуска:
    # - Только для Pull Request
    # - Только в основную ветку (main)
    # - Только из веток development или release/*
    if: |
      github.event_name == 'pull_request' && 
      github.base_ref == 'refs/heads/main' &&
      (contains(github.head_ref, 'development') || contains(github.head_ref, 'release/'))
    
    # Расширенные permissions для управления PR
    permissions:
      pull-requests: write
      contents: write
      checks: read
      
    steps:
      - name: Check PR mergeability status
        uses: actions/github-script@v6
        id: check-mergeable
        with:
          script: |
            // Ждем пока все статус-чеки завершатся
            await new Promise(resolve => setTimeout(resolve, 10000));
            
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            console.log(`PR state: ${pr.state}`);
            console.log(`Mergeable: ${pr.mergeable}`);
            console.log(`Mergeable state: ${pr.mergeable_state}`);
            
            // Проверяем, можно ли мержить PR
            if (pr.mergeable && pr.state === 'open') {
              console.log('✅ PR is ready for auto-merge');
              return 'ready';
            } else {
              console.log('❌ PR cannot be merged automatically');
              console.log(`Reason: mergeable=${pr.mergeable}, state=${pr.state}`);
              return 'not-ready';
            }
          result-encoding: string
    
      - name: Enable auto-merge for PR
        if: steps.check-mergeable.outputs.result == 'ready'
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const result = await github.rest.pulls.enableAutomerge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                merge_method: 'squash'  // Можно изменить на 'merge' или 'rebase'
              });
              
              console.log('✅ Auto-merge successfully enabled');
              console.log('PR will be automatically merged when all requirements are satisfied');
              
              // Создаем комментарий в PR для уведомления
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '✅ Все проверки пройдены! Auto-merge активирован. PR будет автоматически слит после удовлетворения всех требований.'
              });
              
            } catch (error) {
              console.log('⚠️ Could not enable auto-merge:', error.message);
              
              // Создаем комментарий с ошибкой
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `❌ Не удалось активировать auto-merge: ${error.message}. Проверьте настройки защиты ветки.`
              });
            }
    
      - name: Check final merge status
        if: steps.check-mergeable.outputs.result == 'ready'
        run: |
          echo "Auto-merge активирован для PR #${{ github.event.pull_request.number }}"
          echo "PR будет автоматически слит после выполнения всех требований"
          echo "Ветка: ${{ github.head_ref }} -> ${{ github.base_ref }}"

  # ДОПОЛНИТЕЛЬНАЯ ПРОВЕРКА СЛИЯНИЯ
  verify-merge:
    name: Verify Merge Status
    runs-on: ubuntu-latest
    needs: [test, build, lint, auto-merge]
    
    if: github.event_name == 'pull_request' && github.base_ref == 'refs/heads/main'
    
    permissions:
      pull-requests: read
      contents: read
      
    steps:
      - name: Verify all checks passed
        run: |
          echo "✅ Все необходимые проверки успешно завершены:"
          echo "   - Тесты: PASSED"
          echo "   - Сборка: PASSED" 
          echo "   - Линтинг: PASSED"
          echo "   - Auto-merge: CONFIGURED"
          echo ""
          echo "PR готов к автоматическому слиянию!"
